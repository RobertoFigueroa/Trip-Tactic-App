{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { combineReducers } from 'redux';\nimport * as types from \"../types/auth\";\n\nvar token = function token() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return action.payload.token;\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_IDENTITY_CLEARED:\n      {\n        return null;\n      }\n  }\n\n  return state;\n};\n\nvar decoded = function decoded() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return jwtDecode(action.payload.token);\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_IDENTITY_CLEARED:\n      {\n        return null;\n      }\n  }\n\n  return state;\n};\n\nvar isAuthenticating = function isAuthenticating() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return true;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return false;\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return false;\n      }\n  }\n\n  return state;\n};\n\nvar error = function error() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.AUTHENTICATION_STARTED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_COMPLETED:\n      {\n        return null;\n      }\n\n    case types.AUTHENTICATION_FAILED:\n      {\n        return action.payload.error;\n      }\n  }\n\n  return state;\n};\n\nvar auth = combineReducers({\n  token: token,\n  decoded: decoded,\n  isAuthenticating: isAuthenticating,\n  error: error\n});\nexport default auth;\nexport var getAuthToken = function getAuthToken(state) {\n  return state.token;\n};\nexport var getIsAuthenticating = function getIsAuthenticating(state) {\n  return state.isAuthenticating;\n};\nexport var getAuthenticatingError = function getAuthenticatingError(state) {\n  return state.error;\n};\nexport var getAuthUserID = function getAuthUserID(state) {\n  return state.decoded ? state.decoded.user_id : null;\n};\nexport var getAuthExpiration = function getAuthExpiration(state) {\n  return state.decoded ? state.decoded.exp : null;\n};\nexport var getAuthUsername = function getAuthUsername(state) {\n  return state.decoded ? state.decoded.username : null;\n};","map":{"version":3,"sources":["/home/roberto/Desktop/UVG 2020/WEB/Trip-Tactic-App/trip-tactic/reducers/auth.js"],"names":["jwtDecode","combineReducers","types","token","state","action","type","AUTHENTICATION_STARTED","AUTHENTICATION_COMPLETED","payload","AUTHENTICATION_FAILED","AUTHENTICATION_IDENTITY_CLEARED","decoded","isAuthenticating","error","auth","getAuthToken","getIsAuthenticating","getAuthenticatingError","getAuthUserID","user_id","getAuthExpiration","exp","getAuthUsername","username"],"mappings":"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","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport { combineReducers } from 'redux';\n\nimport * as types from '../types/auth';\n\n\nconst token = (state = null, action) => {\n  switch(action.type) {\n    case types.AUTHENTICATION_STARTED: {\n      return null;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return action.payload.token;\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return null;\n    }\n    case types.AUTHENTICATION_IDENTITY_CLEARED: {\n      return null;\n    }\n  }\n\n  return state;\n};\n\nconst decoded = (state = null, action) => {\n  switch(action.type) {\n    case types.AUTHENTICATION_STARTED: {\n      return null;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return jwtDecode(action.payload.token);\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return null;\n    }\n    case types.AUTHENTICATION_IDENTITY_CLEARED: {\n      return null;\n    }\n  }\n\n  return state;\n};\n\nconst isAuthenticating = (state = false, action) => {\n  switch(action.type) {\n    case types.AUTHENTICATION_STARTED: {\n      return true;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return false;\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return false;\n    }\n  }\n\n  return state;\n};\n\nconst error = (state = null, action) => {\n  switch(action.type) {\n    case types.AUTHENTICATION_STARTED: {\n      return null;\n    }\n    case types.AUTHENTICATION_COMPLETED: {\n      return null;\n    }\n    case types.AUTHENTICATION_FAILED: {\n      return action.payload.error;\n    }\n  }\n\n  return state;\n};\n\nconst auth = combineReducers({\n  token,\n  decoded,\n  isAuthenticating,\n  error,\n});\n\n\nexport default auth;\n\n\nexport const getAuthToken = state => state.token;\nexport const getIsAuthenticating = state => state.isAuthenticating;\nexport const getAuthenticatingError = state => state.error;\nexport const getAuthUserID = state => state.decoded ? state.decoded.user_id : null;\nexport const getAuthExpiration = state => state.decoded ? state.decoded.exp : null;\nexport const getAuthUsername = state => state.decoded ? state.decoded.username : null;\n"]},"metadata":{},"sourceType":"module"}